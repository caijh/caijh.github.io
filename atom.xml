<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://caijh.github.io/</id>
    <title>John&apos;s Blog</title>
    <updated>2019-06-24T09:42:03.393Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://caijh.github.io/"/>
    <link rel="self" href="https://caijh.github.io//atom.xml"/>
    <subtitle>搬砖大佬</subtitle>
    <logo>https://caijh.github.io//images/avatar.png</logo>
    <icon>https://caijh.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, John&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[MySQL规范]]></title>
        <id>https://caijh.github.io//post/mysql-gui-fan</id>
        <link href="https://caijh.github.io//post/mysql-gui-fan">
        </link>
        <updated>2019-06-24T02:54:06.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="数据库命名规范">数据库命名规范</h1>
<ul>
<li>所有数据库对象名称必须使用小写字母并用下划线分割</li>
<li>所有数据库对象名称禁止使用mysql保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</li>
<li>数据库对象的命名要能做到见名识意，并且最后不要超过32个字符</li>
<li>临时库表必须以tmp_为前缀并以日期为后缀，备份表必须以bak_为前缀并以日期(时间戳)为后缀</li>
<li>所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h1 id="数据库命名规范">数据库命名规范</h1>
<ul>
<li>所有数据库对象名称必须使用小写字母并用下划线分割</li>
<li>所有数据库对象名称禁止使用mysql保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）</li>
<li>数据库对象的命名要能做到见名识意，并且最后不要超过32个字符</li>
<li>临时库表必须以tmp_为前缀并以日期为后缀，备份表必须以bak_为前缀并以日期(时间戳)为后缀</li>
<li>所有存储相同数据的列名和列类型必须一致（一般作为关联列，如果查询时关联列类型不一致会自动进行数据类型隐式转换，会造成列上的索引失效，导致查询效率降低）</li>
</ul>
<!-- more -->
<h1 id="数据库基本设计规范">数据库基本设计规范</h1>
<ol>
<li>
<p>所有表必须使用Innodb存储引擎
没有特殊要求（即Innodb无法满足的功能如：列存储，存储空间数据等）的情况下，所有表必须使用Innodb存储引擎（mysql5.5之前默认使用Myisam，5.6以后默认的为Innodb）Innodb 支持事务，支持行级锁，更好的恢复性，高并发下性能更好</p>
</li>
<li>
<p>数据库和表的字符集统一使用UTF8
兼容性更好，统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效</p>
</li>
<li>
<p>所有表与字段都要添加注释
使用comment从句添加表和列的备注 从一开始就进行数据字典的维护</p>
</li>
<li>
<p>尽量控制单表数据量的大小，建议控制在500万以内
500万并不是MySQL数据库的限制，过大会造成修改表结构，备份，恢复都会有很大的问题
可以用历史数据归档（应用于日志数据），分库分表（应用于业务数据）等手段来控制数据量大小</p>
</li>
<li>
<p>谨慎使用MySQL分区表
分区表在物理上表现为多个文件，在逻辑上表现为一个表 谨慎选择分区键，跨分区查询效率可能更低 建议采用物理分表的方式管理大数据</p>
</li>
<li>
<p>尽量做到冷热数据分离，减小表的宽度
MySQL限制每个表最多存储4096列，并且每一行数据的大小不能超过65535字节 减少磁盘IO,保证热数据的内存缓存命中率（表越宽，把表装载进内存缓冲池时所占用的内存也就越大,也会消耗更多的IO） 更有效的利用缓存，避免读入无用的冷数据 经常一起使用的列放到一个表中（避免更多的关联操作）</p>
</li>
<li>
<p>禁止在表中建立预留字段</p>
</li>
<li>
<p>禁止在数据库中存储图片，文件等大的二进制数据
通常文件很大，会短时间内造成数据量快速增长，数据库进行数据库读取时，通常会进行大量的随机IO操作，文件很大时，IO操作很耗时 通常存储于文件服务器，数据库只存储文件地址信息</p>
</li>
<li>
<p>禁止在线上做数据库压力测试</p>
</li>
<li>
<p>禁止从开发环境，测试环境直接连接生成环境数据库</p>
</li>
</ol>
<h1 id="数据库字段设计规范">数据库字段设计规范</h1>
<ol>
<li>优先选择符合存储需要的最小的数据类型
列的字段越大，建立索引时所需要的空间也就越大，这样一页中所能存储的索引节点的数量也就越少也越少，在遍历时所需要的IO次数也就越多， 索引的性能也就越差
1）将字符串转换成数字类型存储，如：将IP地址转换成整形数据
2）对于非负型的数据（如自增ID、整型IP）来说，要优先使用无符号整型来存储</li>
<li>避免使用TEXT、BLOB数据类型，最常见的TEXT类型可以存储64k的数据
建议把BLOB或是TEXT列分离到单独的扩展表中
Mysql内存临时表不支持TEXT、BLOB这样的大数据类型，如果查询中包含这样的数据，在排序等操作时，就不能使用内存临时表，必须使用磁盘临时表进行。
而且对于这种数据，Mysql还是要进行二次查询，会使sql性能变得很差，但是不是说一定不能使用这样的数据类型。
如果一定要使用，建议把BLOB或是TEXT列分离到单独的扩展表中，查询时一定不要使用select * 而只需要取出必要的列，不需要TEXT列的数据时不要对该列进行查询。
TEXT或BLOB类型只能使用前缀索引，因为MySQL对索引字段长度是有限制的，所以TEXT类型只能使用前缀索引，并且TEXT列上是不能有默认值的。</li>
<li>避免使用ENUM类型</li>
<li>尽可能把所有列定义为NOT NULL
原因：</li>
</ol>
<ul>
<li>索引NULL列需要额外的空间来保存，所以要占用更多的空间</li>
<li>进行比较和计算时要对NULL值做特别的处理</li>
</ul>
<ol start="5">
<li>使用TIMESTAMP（4个字节）或DATETIME类型（8个字节）存储时间</li>
<li>同财务相关的金额类数据必须使用decimal类型
Decimal类型为精准浮点数，在计算时不会丢失精度。占用空间由定义的宽度决定，每4个字节可以存储9位数字，并且小数点要占用一个字节。可用于存储比bigint更大的整型数据。</li>
</ol>
<h1 id="索引设计规范">索引设计规范</h1>
<ol>
<li>限制每张表上的索引数量，建议单张表索引不超过5个
索引并不是越多越好！索引可以提高效率同样可以降低效率。
索引可以增加查询效率，但同样也会降低插入和更新的效率，甚至有些情况下会降低查询效率。
因为mysql优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，就会增加mysql优化器生成执行计划的时间，同样会降低查询性能。</li>
<li>禁止给表中的每一列都建立单独的索引
5.6版本之前，一个sql只能使用到一个表中的一个索引，5.6以后，虽然有了合并索引的优化方式，但是还是远远没有使用一个联合索引的查询方式好</li>
<li>每个Innodb表必须有个主键
Innodb是一种索引组织表：数据的存储的逻辑顺序和索引的顺序是相同的。
每个表都可以有多个索引，但是表的存储顺序只能有一种 Innodb是按照主键索引的顺序来组织表的。
不要使用更新频繁的列作为主键，不适用多列主键（相当于联合索引） 不要使用UUID、MD5、HASH、字符串列作为主键（无法保证数据的顺序增长）。
主键建议使用自增ID值。</li>
</ol>
<h1 id="常见索引列建议">常见索引列建议</h1>
<ul>
<li>出现在SELECT、UPDATE、DELETE语句的WHERE从句中的列</li>
<li>包含在ORDER BY、GROUP BY、DISTINCT中的字段</li>
<li>多表join的关联列</li>
</ul>
<h1 id="如何选择索引列的顺序">如何选择索引列的顺序</h1>
<p>建立索引的目的是：希望通过索引进行数据查找，减少随机IO，增加查询性能 ，索引能过滤出越少的数据，则从磁盘中读入的数据也就越少。</p>
<ul>
<li>区分度最高的放在联合索引的最左侧（区分度=列中不同值的数量/列的总行数）；</li>
<li>尽量把字段长度小的列放在联合索引的最左侧（因为字段长度越小，一页能存储的数据量越大，IO性能也就越好）；</li>
<li>使用最频繁的列放到联合索引的左侧（这样可以比较少的建立一些索引）。</li>
</ul>
<h1 id="避免建立冗余索引和重复索引">避免建立冗余索引和重复索引</h1>
<p>因为这样会增加查询优化器生成执行计划的时间。</p>
<ul>
<li>重复索引示例：primary key(id)、index(id)、unique index(id)</li>
<li>冗余索引示例：index(a,b,c)、index(a,b)、index(a)</li>
</ul>
<h1 id="优先考虑覆盖索引">优先考虑覆盖索引</h1>
<p>对于频繁的查询优先考虑使用覆盖索引。</p>
<p>覆盖索引：就是包含了所有查询字段(where,select,ordery by,group by包含的字段)的索引</p>
<p>覆盖索引的好处：</p>
<ul>
<li>避免Innodb表进行索引的二次查询</li>
</ul>
<p>Innodb是以聚集索引的顺序来存储的，对于Innodb来说，二级索引在叶子节点中所保存的是行的主键信息，
如果是用二级索引查询数据的话，在查找到相应的键值后，还要通过主键进行二次查询才能获取我们真实所需要的数据。而在覆盖索引中，二级索引的键值中可以获取所有的数据，避免了对主键的二次查询 ，减少了IO操作，提升了查询效率。</p>
<ul>
<li>可以把随机IO变成顺序IO加快查询效率</li>
</ul>
<p>由于覆盖索引是按键值的顺序存储的，对于IO密集型的范围查找来说，对比随机从磁盘读取每一行的数据IO要少的多，因此利用覆盖索引在访问时也可以把磁盘的随机读取的IO转变成索引查找的顺序IO。</p>
<h1 id="索引set规范">索引SET规范</h1>
<p>尽量避免使用外键约束</p>
<p>不建议使用外键约束（foreign key），但一定要在表与表之间的关联键上建立索引；
外键可用于保证数据的参照完整性，但建议在业务端实现；
外键会影响父表和子表的写操作从而降低性能。</p>
<h1 id="数据库sql开发规范">数据库SQL开发规范</h1>
<ol>
<li>建议使用预编译语句进行数据库操作
预编译语句可以重复使用这些计划，减少SQL编译所需要的时间，还可以解决动态SQL所带来的SQL注入的问题 只传参数，比传递SQL语句更高效 相同语句可以一次解析，多次使用，提高处理效率。</li>
<li>避免数据类型的隐式转换
隐式转换会导致索引失效。如：select name,phone from customer where id = '111';</li>
<li>充分利用表上已经存在的索引</li>
<li>数据库设计时，应该要对以后扩展进行考虑</li>
<li>程序连接不同的数据库使用不同的账号，禁止跨库查询</li>
<li>禁止使用SELECT * 必须使用SELECT &lt;字段列表&gt; 查询</li>
<li>禁止使用不含字段列表的INSERT语句</li>
<li>避免使用子查询，可以把子查询优化为join操作
通常子查询在in子句中，且子查询中为简单SQL(不包含union、group by、order by、limit从句)时，才可以把子查询转化为关联查询进行优化。
子查询性能差的原因：</li>
</ol>
<ul>
<li>子查询的结果集无法使用索引，通常子查询的结果集会被存储到临时表中，不论是内存临时表还是磁盘临时表都不会存在索引，所以查询性能会受到一定的影响；</li>
<li>特别是对于返回结果集比较大的子查询，其对查询性能的影响也就越大；</li>
<li>由于子查询会产生大量的临时表也没有索引，所以会消耗过多的CPU和IO资源，产生大量的慢查询。</li>
</ul>
<ol start="9">
<li>避免使用JOIN关联太多的表
对于Mysql来说，是存在关联缓存的，缓存的大小可以由join_buffer_size参数进行设置。
在Mysql中，对于同一个SQL多关联（join）一个表，就会多分配一个关联缓存，如果在一个SQL中关联的表越多，所占用的内存也就越大。
如果程序中大量的使用了多表关联的操作，同时join_buffer_size设置的也不合理的情况下，就容易造成服务器内存溢出的情况，就会影响到服务器数据库性能的稳定性。
同时对于关联操作来说，会产生临时表操作，影响查询效率Mysql最多允许关联61个表，建议不超过5个。</li>
<li>减少同数据库的交互次数</li>
<li>对应同一列进行or判断时，使用in代替or</li>
<li>禁止使用order by rand() 进行随机排序
会把表中所有符合条件的数据装载到内存中，然后在内存中对所有数据根据随机生成的值进行排序，并且可能会对每一行都生成一个随机值，如果满足条件的数据集非常大，就会消耗大量的CPU和IO及内存资源。</li>
<li>WHERE从句中禁止对列进行函数转换和计算
对列进行函数转换或计算时会导致无法使用索引。</li>
<li>拆分复杂的大SQL为多个小SQL</li>
</ol>
<h1 id="数据库操作行为规范">数据库操作行为规范</h1>
<ol>
<li>超100万行的批量写（UPDATE、DELETE、INSERT）操作，要分批多次进行操作</li>
<li>对于大表使用pt-online-schema-change修改表结构</li>
</ol>
<ul>
<li>避免大表修改产生的主从延迟</li>
<li>避免在对表字段进行修改时进行锁表</li>
</ul>
<ol start="3">
<li>禁止为程序使用的账号赋予super权限</li>
<li>对于程序连接数据库账号，遵循权限最小原则
程序使用数据库账号只能在一个DB下使用，不准跨库 程序使用的账号原则上不准有drop权限。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL学习笔记]]></title>
        <id>https://caijh.github.io//post/graphql-xue-xi-bi-ji</id>
        <link href="https://caijh.github.io//post/graphql-xue-xi-bi-ji">
        </link>
        <updated>2019-06-24T02:35:07.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="graphql是什么">GraphQL是什么？</h2>
<p>GraphQl官方的定义是：</p>
<p>GraphQL是一种API的查询语言。 它用于运行时完成数据查询。 GraphQL服务与传输无关，但通常通过HTTP提供。</p>
<p>GraphQl特性</p>
<ul>
<li>GraphQL query， 只请求需要的数据</li>
<li>GraphQL schema， 在服务器端定义了api的数据结构</li>
<li>可以在一个请求中获取多个数据，如果是rest的话， 需要访问多个接口</li>
</ul>
<p>与REST对比，REST的缺点的主要有以下:</p>
<ul>
<li>Overfetching 往往会给客户端返回过多的数据</li>
<li>endpoints过多，管理endpoints是个问题。Endpoints修改，客户端也需要修改。</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h2 id="graphql是什么">GraphQL是什么？</h2>
<p>GraphQl官方的定义是：</p>
<p>GraphQL是一种API的查询语言。 它用于运行时完成数据查询。 GraphQL服务与传输无关，但通常通过HTTP提供。</p>
<p>GraphQl特性</p>
<ul>
<li>GraphQL query， 只请求需要的数据</li>
<li>GraphQL schema， 在服务器端定义了api的数据结构</li>
<li>可以在一个请求中获取多个数据，如果是rest的话， 需要访问多个接口</li>
</ul>
<p>与REST对比，REST的缺点的主要有以下:</p>
<ul>
<li>Overfetching 往往会给客户端返回过多的数据</li>
<li>endpoints过多，管理endpoints是个问题。Endpoints修改，客户端也需要修改。</li>
</ul>
<!-- more -->
<p>GraphQL只是一种协议， 官方提供了多种实现。如java, javascript.</p>
<p>GraphQL中的类型</p>
<ul>
<li>
<p>scalar type</p>
<p>GraphQL的Scalar Type有Int, String, Float, Boolean, ID</p>
</li>
<li>
<p>object type</p>
</li>
<li>
<p>Fragments</p>
<pre><code class="language-java">fragment liftInfo on Lift {
  name
  status
  capacity
  night
  elevationGain
}
</code></pre>
<pre><code class="language-java">query {
    Lift(id: &quot;jazz-cat&quot;) {
      ...liftInfo
      trailAccess {
        name
        difficulty
      }
    }
    Trail(id: &quot;river-run&quot;) {
      name
      difficulty
      accessedByLifts {
        ...liftInfo
      }
    }
}
</code></pre>
<p>The fragment in this example is named <code>liftInfo</code>, and it is a selection set on the <code>Lift</code> type.</p>
</li>
<li>
<p>union type</p>
<pre><code class="language-java">union AgendaItem = StudyGroup | Workout

type StudyGroup {
    name: String!
    subject: String
    students: [User!]!
}

type Workout {
    name: String!
    reps: Int!
}

type Query {
    agenda: [AgendaItem!]!
}

</code></pre>
</li>
<li>
<p>interface</p>
<p><em>Interfaces</em> are another option when dealing with multiple object types that could be returned by a single field. An interface is an abstract type that establishes a list of fields that should be implemented in similar object types. When another type implements the interface, it includes all of the fields from the interface and usually some of its own fields.</p>
<pre><code class="language-java">interface AgendaItem {
    name: String!
    start: DateTime!
    end: DateTime!
}

type StudyGroup implements AgendaItem {
    name: String!
    start: DateTime!
    end: DateTime!
    participants: [User!]!
    topic: String!
}

type Workout implements AgendaItem {
    name: String!
    start: DateTime!
    end: DateTime!
    reps: Int!
}

type Query {
    agenda: [AgendaItem!]!
}
</code></pre>
</li>
<li>
<p>enums</p>
<pre><code class="language-java">enum PhotoCategory {
    SELFIE
    PORTRAIT
    ACTION
    LANDSCAPE
    GRAPHIC
}
</code></pre>
<pre><code class="language-java">type Photo {
    id: ID!
    name: String!
    url: String!
    description: String
    created: DateTime!
    category: PhotoCategory!
}
</code></pre>
</li>
</ul>
<h2 id="graphql的java使用">GraphQL的Java使用</h2>
<p>源码地址：<a href="https://github.com/caijh/samples/tree/master/sample-graphql">https://github.com/caijh/samples/tree/master/sample-graphql</a></p>
<ol>
<li>
<p>引入maven依赖</p>
<pre><code class="language-java">&lt;dependency&gt;
    &lt;groupId&gt;com.graphql-java&lt;/groupId&gt;
    &lt;artifactId&gt;graphql-java&lt;/artifactId&gt;
    &lt;version&gt;11.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
&lt;dependency&gt;
            &lt;groupId&gt;com.graphql-java&lt;/groupId&gt;
            &lt;artifactId&gt;graphql-spring-boot-starter&lt;/artifactId&gt;
            &lt;version&gt;5.0.2&lt;/version&gt;
 &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.graphql-java&lt;/groupId&gt;
            &lt;artifactId&gt;graphql-java-tools&lt;/artifactId&gt;
            &lt;version&gt;5.2.4&lt;/version&gt;
        &lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;com.graphql-java&lt;/groupId&gt;
    &lt;artifactId&gt;graphiql-spring-boot-starter&lt;/artifactId&gt;
    &lt;version&gt;5.0.2&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>建立表</p>
<pre><code class="language-mysql">create table `author` (
	id bigint primary key auto_increment,
    name varchar(45) not null,
    birthday datetime default null
) engine = InnoDB default charset=utf8 comment '作者';

create table `article` (
	id bigint primary key auto_increment,
    title varchar(100) not null,
    author_id bigint not null,
    content text not null
) engine = InnoDB default charset = utf8 comment '文章';

</code></pre>
</li>
<li>
<p>创建graphqls</p>
<p>schema.graphql</p>
<pre><code class="language-java">scalar Date

type Query {

}

type Mutation {

}
</code></pre>
<p>author.graphqls</p>
<pre><code class="language-java">extend type  Query {
    findAuthorById(id: Int): Author
}

extend type Mutation {
    newAuthor(name: String, birthday: Date): Boolean
}

type Author {
    id: ID
    name: String
    birthday: Date
}

</code></pre>
<p>article.graphqls</p>
<pre><code class="language-java">extend type Query {
    findArticleById(id: Int) : Article
}

extend type Mutation {
    newArticle(title: String, content: String, authorId: Int): Boolean
}

type Article {
    id: ID
    title: String
    content: String
    authorId: Int
}
</code></pre>
</li>
<li>
<p>创建Query和Mutation</p>
<pre><code class="language-java">package com.coding.sample.graphql.component;

import com.coding.sample.graphql.entity.Article;
import com.coding.sample.graphql.entity.Author;
import com.coding.sample.graphql.mapper.ArticleMapper;
import com.coding.sample.graphql.mapper.AuthorMapper;
import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Query implements GraphQLQueryResolver {

    @Autowired
    private AuthorMapper authorMapper;
    @Autowired
    private ArticleMapper articleMapper;

    public Author findAuthorById(Long id) {
        return authorMapper.selectByPrimaryKey(id);
    }

    public Article findArticleById(Long id) {
        return articleMapper.selectByPrimaryKey(id);
    }

}
</code></pre>
<pre><code class="language-java">package com.coding.sample.graphql.component;

import java.util.Date;

import com.coding.sample.graphql.entity.Article;
import com.coding.sample.graphql.entity.Author;
import com.coding.sample.graphql.mapper.ArticleMapper;
import com.coding.sample.graphql.mapper.AuthorMapper;
import com.coxautodev.graphql.tools.GraphQLMutationResolver;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Mutation implements GraphQLMutationResolver {

    @Autowired
    private AuthorMapper authorMapper;
    @Autowired
    private ArticleMapper articleMapper;

    public boolean newAuthor(String name, Date birthday) {
        Author author = new Author();
        author.setName(name);
        author.setBirthday(birthday);
        return authorMapper.insert(author) &gt; 0;
    }

    public boolean newArticle(String title, String content, Long authorId) {
        Article article = new Article();
        article.setTitle(title);
        article.setContent(content);
        article.setAuthorId(authorId);
        articleMapper.insert(article);
        return true;
    }

}
</code></pre>
</li>
<li>
<p>测试</p>
</li>
</ol>
<p><img src="https://caijh.github.io//post-images/1561343905414.png" alt="">
<img src="https://caijh.github.io//post-images/1561343911617.png" alt=""></p>
]]></content>
    </entry>
</feed>