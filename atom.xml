<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://caijh.github.io/</id>
    <title>John&apos;s Blog</title>
    <updated>2019-07-18T04:30:10.107Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://caijh.github.io/"/>
    <link rel="self" href="https://caijh.github.io//atom.xml"/>
    <subtitle>搬砖小弟</subtitle>
    <logo>https://caijh.github.io//images/avatar.png</logo>
    <icon>https://caijh.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, John&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Redis - 缓存问题]]></title>
        <id>https://caijh.github.io//post/redis-huan-cun-wen-ti</id>
        <link href="https://caijh.github.io//post/redis-huan-cun-wen-ti">
        </link>
        <updated>2019-07-18T03:42:55.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="缓存穿透">缓存穿透</h3>
<blockquote>
<p>什么是缓存穿透？<br>
缓存穿透是指查询一个一定不在缓存中存在的key. 由于key不存在，每次都会去查询数据库，如果对于这个key的请求很多的话，可能会把数据库搞垮。</p>
</blockquote>
<p>解决方案：</p>
<ol>
<li>布隆过滤器</li>
<li>将查询数据库的空结果也缓存起来，设置一个较短的过期时间。</li>
</ol>
<h3 id="缓存雪崩">缓存雪崩</h3>
<blockquote>
<p>什么是缓存雪崩？<br>
对于多个key的查询，全部请求都走数据库了。有两种情况：一种是redis挂掉，别一个情况是一段时间内那些key都失效了。<br>
对于第一种情况要保证redis的的高可性，对于第二种情况可以为key设置不同的随随机过期时间。</p>
</blockquote>
<h3 id="缓存数据一致性">缓存数据一致性</h3>
<ol>
<li>写数据库也写缓存，保证了数据一致性；但是难保证数据库与redis的事务</li>
<li>写数据库，直接删缓存；读缓存发现没有，从数据库读取并保存缓存；带来问题是并发问题。</li>
<li>应该根据不同的业务，来处理缓存的生成。</li>
</ol>
]]></summary>
        <content type="html"><![CDATA[<h3 id="缓存穿透">缓存穿透</h3>
<blockquote>
<p>什么是缓存穿透？<br>
缓存穿透是指查询一个一定不在缓存中存在的key. 由于key不存在，每次都会去查询数据库，如果对于这个key的请求很多的话，可能会把数据库搞垮。</p>
</blockquote>
<p>解决方案：</p>
<ol>
<li>布隆过滤器</li>
<li>将查询数据库的空结果也缓存起来，设置一个较短的过期时间。</li>
</ol>
<h3 id="缓存雪崩">缓存雪崩</h3>
<blockquote>
<p>什么是缓存雪崩？<br>
对于多个key的查询，全部请求都走数据库了。有两种情况：一种是redis挂掉，别一个情况是一段时间内那些key都失效了。<br>
对于第一种情况要保证redis的的高可性，对于第二种情况可以为key设置不同的随随机过期时间。</p>
</blockquote>
<h3 id="缓存数据一致性">缓存数据一致性</h3>
<ol>
<li>写数据库也写缓存，保证了数据一致性；但是难保证数据库与redis的事务</li>
<li>写数据库，直接删缓存；读缓存发现没有，从数据库读取并保存缓存；带来问题是并发问题。</li>
<li>应该根据不同的业务，来处理缓存的生成。</li>
</ol>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis - 数据淘汰策略]]></title>
        <id>https://caijh.github.io//post/redis-shu-ju-tao-tai-ce-lue</id>
        <link href="https://caijh.github.io//post/redis-shu-ju-tao-tai-ce-lue">
        </link>
        <updated>2019-07-18T03:08:46.000Z</updated>
        <summary type="html"><![CDATA[<ul>
<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>
<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
<li>no-enviction（驱逐）：禁止驱逐数据，返回错误</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<ul>
<li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>
<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
<li>no-enviction（驱逐）：禁止驱逐数据，返回错误</li>
</ul>
<!-- more -->
<h3 id="参数设置">参数设置</h3>
<p>Redis中存在一个参数用来设定内存使用上限，这个参数是maxmemory，可以在redis.conf中设置redis内存使用的最大值，当redis使用内存达到最大值时，redis会根据配置文件中的策略选取要删除的key，并删除这些key-value的值。若根据配置的策略，没有符合策略的key，也就是说内存已经容不下新的key-value了，但此时有不能删除key，那么这时候写的话，将会出现写错误。</p>
<h3 id="何时触发内存淘汰">何时触发内存淘汰</h3>
<ol>
<li>客户端发送指令，导致数据的增加时</li>
<li>redis检测到内存的使用达到上限</li>
<li>redis自身执行指令时</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vagrant - 使用]]></title>
        <id>https://caijh.github.io//post/vagrant-shi-yong</id>
        <link href="https://caijh.github.io//post/vagrant-shi-yong">
        </link>
        <updated>2019-07-17T14:11:55.000Z</updated>
        <summary type="html"><![CDATA[<p>Vagrant是用来管理虚拟机的，如VirtualBox、VMware、AWS等，主要好处是可以提供一个可配置、可移植和复用的软件环境，可以使用shell、chef、puppet等工具部署。所以vagrant不能单独使用，如果你用它来管理自己的开发环境的话，必须在自己的电脑里安装了虚拟机软件，我使用的是virtualbox。</p>
<p>Vagrant提供一个命令行工具vagrant，通过这个命令行工具可以直接启动一个虚拟机，当然你需要提前定义一个Vagrantfile文件，这有点类似Dockerfile之于docker了。</p>
<p>跟docker类比这来看vagrant就比较好理解了，vagrant也是用来提供一致性环境的，vagrant本身也提供一个镜像源，使用vagrant init hashicorp/precise64就可以初始化一个Ubuntu 12.04的镜像。</p>
]]></summary>
        <content type="html"><![CDATA[<p>Vagrant是用来管理虚拟机的，如VirtualBox、VMware、AWS等，主要好处是可以提供一个可配置、可移植和复用的软件环境，可以使用shell、chef、puppet等工具部署。所以vagrant不能单独使用，如果你用它来管理自己的开发环境的话，必须在自己的电脑里安装了虚拟机软件，我使用的是virtualbox。</p>
<p>Vagrant提供一个命令行工具vagrant，通过这个命令行工具可以直接启动一个虚拟机，当然你需要提前定义一个Vagrantfile文件，这有点类似Dockerfile之于docker了。</p>
<p>跟docker类比这来看vagrant就比较好理解了，vagrant也是用来提供一致性环境的，vagrant本身也提供一个镜像源，使用vagrant init hashicorp/precise64就可以初始化一个Ubuntu 12.04的镜像。</p>
<!-- more -->
<h3 id="启动并运行">启动并运行</h3>
<pre><code>$ vagrant init hashicorp/precise64
$ vagrant up // 启动
</code></pre>
<p>先在目录生成一个Vagrantfile文件, 下载系统并启动。</p>
<h3 id="进入虚拟机">进入虚拟机</h3>
<p>vagrant up</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis - 过期删除策略]]></title>
        <id>https://caijh.github.io//post/redis-guo-qi-shan-chu-ce-lue</id>
        <link href="https://caijh.github.io//post/redis-guo-qi-shan-chu-ce-lue">
        </link>
        <updated>2019-07-15T03:18:31.000Z</updated>
        <summary type="html"><![CDATA[<p>Redis 采用的过期策略： 懒汉式删除 + 定期删除</p>
]]></summary>
        <content type="html"><![CDATA[<p>Redis 采用的过期策略： 懒汉式删除 + 定期删除</p>
<!-- more -->
<h1 id="三种过期删除策略">三种过期删除策略</h1>
<h2 id="定时删除">定时删除</h2>
<p>设置key的过期时间的同时为key设置一个定时器，在key过期时对key进行删除。<br>
优点： 保证内存被尽快回收。<br>
缺点：</p>
<ol>
<li>若key过多，删除key占用CPU时间</li>
<li>定时器的创建耗时，若对每个key创建定时器，会有大量定时器产生，影响性能</li>
</ol>
<h2 id="懒汉式删除">懒汉式删除</h2>
<p>在访问key的时候，判断key是否过期，如过期，删除key.<br>
优点： 删除操作只发生个获取key的时候，对CPU占用少<br>
缺点：若大量key超时，但很长一段时间内都没有访问，那些key会一直占用内存，可能会有内存泄漏</p>
<h2 id="定期删除">定期删除</h2>
<p>每隔一段时间执行一次删除过期key<br>
优点：</p>
<ol>
<li>减少对CPU的占用</li>
<li>克服懒汉式删除的缺点<br>
缺点：获取的key可以已经是过期的</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL - explain详解]]></title>
        <id>https://caijh.github.io//post/mysql-explain-xiang-jie</id>
        <link href="https://caijh.github.io//post/mysql-explain-xiang-jie">
        </link>
        <updated>2019-07-14T15:23:40.000Z</updated>
        <content type="html"><![CDATA[<h5 id="explain详解">Explain详解</h5>
<ol>
<li>
<p>ID列</p>
<p>ID值不同时, 执行计划由ID大的向ID小读; ID值相同时, 执行计划由上到下读</p>
</li>
<li>
<p>SELECT_TYPE列</p>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>SIMPLE</td>
<td style="text-align:left">不包含子查询或UNION操作的查询</td>
</tr>
<tr>
<td>PRIMARY</td>
<td style="text-align:left">查询中如果包含了子查询,那么最外层的查询会被标为primary</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td style="text-align:left">select列表中的子查询</td>
</tr>
<tr>
<td>dependent subquery</td>
<td style="text-align:left">依赖外部结果的子查询</td>
</tr>
<tr>
<td>Union</td>
<td style="text-align:left">Union操作的第二个表之后的查询值为union</td>
</tr>
<tr>
<td>Dependent union</td>
<td style="text-align:left">当union作为子查询, 第二或第二个后的查询select_type</td>
</tr>
<tr>
<td>Union result</td>
<td style="text-align:left">union产生的结果集</td>
</tr>
<tr>
<td>Derived</td>
<td style="text-align:left">出现在from子句中的子查询</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>table列</p>
<p>表的名称或者表的别名.</p>
<p>unionM,N 由ID为M,N查询union产生的结果集</p>
<p>derivedN or subqueryN 表示由ID为N的查询产生结果集</p>
</li>
<li>
<p>partition列</p>
<p>对于分区表, 显示查询的分区id; 非分区表显示NULL</p>
</li>
<li>
<p>Type列</p>
<p>查询中使用了联结的类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>System</td>
<td>这是const联接类型中的一个特例, 当查询的表中只在一行显示</td>
</tr>
<tr>
<td>const</td>
<td>表中有且只有一个匹配的行时使用, 如主键或者唯一索引的查询</td>
</tr>
<tr>
<td>eq_ref</td>
<td>唯一索引或主键查找, 对于每个索引键, 表中只有一条记录与之匹配</td>
</tr>
<tr>
<td>ref</td>
<td>非唯一索引查找, 返回匹配某个单独值的所有行</td>
</tr>
<tr>
<td>ref_or_null</td>
<td>类似于ref类型的查询, 但是附加了对NULL值列的查询</td>
</tr>
<tr>
<td>index_merge</td>
<td>表示使用了索引合并</td>
</tr>
<tr>
<td>range</td>
<td>索引范围</td>
</tr>
<tr>
<td>index</td>
<td>Full index Scan全索引扫描,</td>
</tr>
<tr>
<td>all</td>
<td>全表扫描</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>Extra列</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Distinct</td>
<td>优化distinct操作, 找到第一匹配的元组后暂停找同样值的动作</td>
</tr>
<tr>
<td>Not Exists</td>
<td>使用Not Exists来优化查询</td>
</tr>
<tr>
<td>Using filesort</td>
<td>使用额外操作进行排序</td>
</tr>
<tr>
<td>Using index</td>
<td>使用了覆盖索引进行查询</td>
</tr>
<tr>
<td>Using temporary</td>
<td>需要使用临时表处理查询</td>
</tr>
<tr>
<td>Using where</td>
<td>需要在服务层使用where条件过滤</td>
</tr>
<tr>
<td>select tables optimized away</td>
<td>直接通过索引来获得数据, 不用访问表</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>possible_keys 列</p>
<p>指出MySQL能使用哪些索引来优化查询, 查询列所涉及的列上的索引都会被列出, 但不一定会被使用.</p>
</li>
<li>
<p>Key列</p>
<p>查询优化器优化查询实际所使用索引列</p>
</li>
<li>
<p>Key_len列</p>
<p>表示索引字段的最大可能长度</p>
</li>
<li>
<p>ref列</p>
<p>表示哪些列或常量被用于查询索引列上的值</p>
</li>
<li>
<p>rows列</p>
<p>表示MySQL通过索引统计信息, 估算的需要读取的行数, 是一个统计抽样结果, 并不十分准确</p>
</li>
<li>
<p>filtered列</p>
<p>表示返回结果的行数占需要读取行数的百分比, 值越大越好</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[源码阅读 - AbstractQueuedSynchronizer]]></title>
        <id>https://caijh.github.io//post/yuan-dai-ma-abstractqueuedsynchronizer</id>
        <link href="https://caijh.github.io//post/yuan-dai-ma-abstractqueuedsynchronizer">
        </link>
        <updated>2019-07-14T10:38:40.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>AbstractQueuedSynchronizer, 简称AQS, 是Java 并发包的基础类，并发包中的很多api都是基于AQS来实现加锁与释放锁等功能。</p>
</blockquote>
<p>例如ReentrantLock内部拥有一个继承于AbstractQueuedSynchronizer的Sync类实现加锁与释放锁。<br>
AQS内部有一个state状态记录当前线程的加锁次数，还有一个exclusiveOwnerThread变量记录了独占的线程。</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>AbstractQueuedSynchronizer, 简称AQS, 是Java 并发包的基础类，并发包中的很多api都是基于AQS来实现加锁与释放锁等功能。</p>
</blockquote>
<p>例如ReentrantLock内部拥有一个继承于AbstractQueuedSynchronizer的Sync类实现加锁与释放锁。<br>
AQS内部有一个state状态记录当前线程的加锁次数，还有一个exclusiveOwnerThread变量记录了独占的线程。</p>
<!-- more -->
<pre><code>
    /**
     * Creates an instance of {@code ReentrantLock} with the
     * given fairness policy.
     *
     * @param fair {@code true} if this lock should use a fair ordering policy
     */
    public ReentrantLock(boolean fair) {
        sync = fair ? new FairSync() : new NonfairSync();
    }
</code></pre>
<p>ReentrantLock可以是公平的也可以不非公平的。</p>
<pre><code>/**
     * Acquires in exclusive mode, ignoring interrupts.  Implemented
     * by invoking at least once {@link #tryAcquire},
     * returning on success.  Otherwise the thread is queued, possibly
     * repeatedly blocking and unblocking, invoking {@link
     * #tryAcquire} until success.  This method can be used
     * to implement method {@link Lock#lock}.
     *
     * @param arg the acquire argument.  This value is conveyed to
     *        {@link #tryAcquire} but is otherwise uninterpreted and
     *        can represent anything you like.
     */
    public final void acquire(int arg) {
        if (!tryAcquire(arg) &amp;&amp;
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }
</code></pre>
<p>AQS中的加锁，申请不到锁，加入等待队列。</p>
<pre><code>/**
     * Sync object for fair locks
     */
    static final class FairSync extends Sync {
        private static final long serialVersionUID = -3000897897090466540L;
        /**
         * Fair version of tryAcquire.  Don't grant access unless
         * recursive call or no waiters or is first.
         */
        @ReservedStackAccess
        protected final boolean tryAcquire(int acquires) {
            final Thread current = Thread.currentThread();
            int c = getState();
            if (c == 0) {
                if (!hasQueuedPredecessors() &amp;&amp;
                    compareAndSetState(0, acquires)) {
                    setExclusiveOwnerThread(current);
                    return true;
                }
            }
            else if (current == getExclusiveOwnerThread()) {
                int nextc = c + acquires;
                if (nextc &lt; 0)
                    throw new Error(&quot;Maximum lock count exceeded&quot;);
                setState(nextc);
                return true;
            }
            return false;
        }
    }
</code></pre>
<p>hasQueuedPredecessors看等待队列中是否有线程在排队。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Cloud - 如何解决Feign/Ribbon第一次请求失败的问题]]></title>
        <id>https://caijh.github.io//post/spring-cloud-ru-he-jie-jue-feignribbon-di-yi-ci-qing-qiu-shi-bai-de-wen-ti</id>
        <link href="https://caijh.github.io//post/spring-cloud-ru-he-jie-jue-feignribbon-di-yi-ci-qing-qiu-shi-bai-de-wen-ti">
        </link>
        <updated>2019-07-13T14:43:38.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>造成该问题的原因？<br>
Hystrix默认的超时时间是1秒，如果超过这个时间尚未响应，将会进入fallback代码。而首次请求往往会比较慢（由于Ribbon是懒加载的，在首次请求时，才会开始初始化相关类），这个响应时间可能就大于1秒了。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>造成该问题的原因？<br>
Hystrix默认的超时时间是1秒，如果超过这个时间尚未响应，将会进入fallback代码。而首次请求往往会比较慢（由于Ribbon是懒加载的，在首次请求时，才会开始初始化相关类），这个响应时间可能就大于1秒了。</p>
</blockquote>
<!-- more -->
<h4 id="1-将hystrix的超时设长">1. 将Hystrix的超时设长</h4>
<pre><code>hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 5000
</code></pre>
<h4 id="2-禁用hystrix超时">2. 禁用Hystrix超时</h4>
<pre><code>hystrix.command.default.execution.timeout.enabled: false
</code></pre>
<h4 id="3-为feign禁用hystrix">3. 为Feign禁用Hystrix</h4>
<p>全局禁用</p>
<pre><code>feign.hystrix.enabled: false
</code></pre>
<p>局部禁用</p>
<pre><code>@FeignClient(name = &quot;microservice-provider-user&quot;)
public interface UserFeignClient {
  @GetMapping(&quot;/users/{id}&quot;)
  User findById(@PathVariable(&quot;id&quot;) Long id);
}
class FooConfiguration {
  @Bean
  @Scope(&quot;prototype&quot;)
  public Feign.Builder feignBuilder(){
    return Feign.builder();
  }
}
</code></pre>
<h4 id="4-ribbon配置饥饿加载">4. Ribbon配置饥饿加载</h4>
<pre><code>ribbon:
  eager-load:
    enabled: true
    clients: client1, client2, client3
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java - 线程池]]></title>
        <id>https://caijh.github.io//post/java-xian-cheng-chi</id>
        <link href="https://caijh.github.io//post/java-xian-cheng-chi">
        </link>
        <updated>2019-07-08T10:49:35.000Z</updated>
        <summary type="html"><![CDATA[<h4 id="threadpoolexecutor的重要参数">ThreadPoolExecutor的重要参数</h4>
<ul>
<li>corePoolSize：核心线程数<br>
核心线程会一直存活，及时没有任务需要执行<br>
当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理<br>
设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭</li>
<li>queueCapacity：任务队列容量（阻塞队列）<br>
当核心线程数达到最大时，新任务会放在队列中排队等待执行</li>
<li>maxPoolSize：最大线程数<br>
当线程数&gt;=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务<br>
当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常</li>
<li>keepAliveTime：线程空闲时间<br>
当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize<br>
如果allowCoreThreadTimeout=true，则会直到线程数量=0</li>
<li>allowCoreThreadTimeout：允许核心线程超时</li>
<li>rejectedExecutionHandler：任务拒绝处理器<br>
两种情况会拒绝处理任务：<br>
当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务<br>
当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务<br>
线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常<br>
ThreadPoolExecutor类有几个内部实现类来处理这类情况：<br>
AbortPolicy 丢弃任务，抛运行时异常<br>
CallerRunsPolicy 执行任务<br>
DiscardPolicy 忽视，什么都不会发生<br>
DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务<br>
实现RejectedExecutionHandler接口，可自定义处理器</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<h4 id="threadpoolexecutor的重要参数">ThreadPoolExecutor的重要参数</h4>
<ul>
<li>corePoolSize：核心线程数<br>
核心线程会一直存活，及时没有任务需要执行<br>
当线程数小于核心线程数时，即使有线程空闲，线程池也会优先创建新线程处理<br>
设置allowCoreThreadTimeout=true（默认false）时，核心线程会超时关闭</li>
<li>queueCapacity：任务队列容量（阻塞队列）<br>
当核心线程数达到最大时，新任务会放在队列中排队等待执行</li>
<li>maxPoolSize：最大线程数<br>
当线程数&gt;=corePoolSize，且任务队列已满时。线程池会创建新线程来处理任务<br>
当线程数=maxPoolSize，且任务队列已满时，线程池会拒绝处理任务而抛出异常</li>
<li>keepAliveTime：线程空闲时间<br>
当线程空闲时间达到keepAliveTime时，线程会退出，直到线程数量=corePoolSize<br>
如果allowCoreThreadTimeout=true，则会直到线程数量=0</li>
<li>allowCoreThreadTimeout：允许核心线程超时</li>
<li>rejectedExecutionHandler：任务拒绝处理器<br>
两种情况会拒绝处理任务：<br>
当线程数已经达到maxPoolSize，切队列已满，会拒绝新任务<br>
当线程池被调用shutdown()后，会等待线程池里的任务执行完毕，再shutdown。如果在调用shutdown()和线程池真正shutdown之间提交任务，会拒绝新任务<br>
线程池会调用rejectedExecutionHandler来处理这个任务。如果没有设置默认是AbortPolicy，会抛出异常<br>
ThreadPoolExecutor类有几个内部实现类来处理这类情况：<br>
AbortPolicy 丢弃任务，抛运行时异常<br>
CallerRunsPolicy 执行任务<br>
DiscardPolicy 忽视，什么都不会发生<br>
DiscardOldestPolicy 从队列中踢出最先进入队列（最后一个执行）的任务<br>
实现RejectedExecutionHandler接口，可自定义处理器</li>
</ul>
<!-- more -->
<h4 id="threadpoolexecutor执行顺序">ThreadPoolExecutor执行顺序：</h4>
<pre><code> 线程池按以下行为执行任务
</code></pre>
<ol>
<li>当线程数小于核心线程数时，创建线程。</li>
<li>当线程数大于等于核心线程数，且任务队列未满时，将任务放入任务队列。</li>
<li>当线程数大于等于核心线程数，且任务队列已满<br>
3.1 若线程数小于最大线程数，创建线程<br>
3.2 若线程数等于最大线程数，抛出异常，拒绝任务</li>
</ol>
<p>三、如何设置参数</p>
<ul>
<li>默认值<br>
corePoolSize=1<br>
queueCapacity=Integer.MAX_VALUE<br>
maxPoolSize=Integer.MAX_VALUE<br>
keepAliveTime=60s<br>
allowCoreThreadTimeout=false<br>
rejectedExecutionHandler=AbortPolicy()</li>
</ul>
<blockquote>
<p>如何来设置?</p>
</blockquote>
<ol>
<li>需要根据几个值来决定<br>
tasks ：每秒的任务数，假设为500~1000<br>
taskcost：每个任务花费时间，假设为0.1s<br>
responsetime：系统允许容忍的最大响应时间，假设为1s</li>
<li>做几个计算</li>
</ol>
<ul>
<li>corePoolSize = 每秒需要多少个线程处理？<br>
threadcount = tasks/(1/taskcost) =tasks*taskcout =  (500~1000)*0.1 = 50~100 个线程。corePoolSize设置应该大于50<br>
根据8020原则，如果80%的每秒任务数小于800，那么corePoolSize设置为80即可</li>
<li>queueCapacity = (coreSizePool/taskcost)<em>responsetime<br>
计算可得 queueCapacity = 80/0.1</em>1 = 800。意思是队列里的线程可以等待1s，超过了的需要新开线程来执行<br>
切记不能设置为Integer.MAX_VALUE，这样队列会很大，线程数只会保持在corePoolSize大小，当任务陡增时，不能新开线程来执行，响应时间会随之陡增。</li>
<li>maxPoolSize = (max(tasks)- queueCapacity)/(1/taskcost) + corePoolSize<br>
计算可得 maxPoolSize = (1000-800)/10 +80 = 100<br>
（最大任务数-队列容量）/每个线程每秒处理能力 = 最大线程数</li>
<li>rejectedExecutionHandler：根据具体情况来决定，任务不重要可丢弃，任务重要则要利用一些缓冲机制来处理</li>
<li>keepAliveTime和allowCoreThreadTimeout采用默认通常能满足<br>
以上都是理想值，实际情况下要根据机器性能来决定。如果在未达到最大线程数的情况机器cpu load已经满了，则需要通过升级硬件（呵呵）和优化代码，降低taskcost来处理。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kafka-Acks参数]]></title>
        <id>https://caijh.github.io//post/kafka-acks-can-shu</id>
        <link href="https://caijh.github.io//post/kafka-acks-can-shu">
        </link>
        <updated>2019-07-06T15:16:29.000Z</updated>
        <summary type="html"><![CDATA[<p>kafka中用topic表示同类的消息，topic可以有1个或多个partition.<br>
kafka集群中一个broker负责一部分partition，在kafka集群中，每个Partition都有多个副本，其中一个副本叫做leader，其他的副本叫做follower。</p>
]]></summary>
        <content type="html"><![CDATA[<p>kafka中用topic表示同类的消息，topic可以有1个或多个partition.<br>
kafka集群中一个broker负责一部分partition，在kafka集群中，每个Partition都有多个副本，其中一个副本叫做leader，其他的副本叫做follower。</p>
<!-- more -->
<h4 id="多副本之间如何同步">多副本之间如何同步？</h4>
<p>其实任何一个Partition，只有副本Leader是对外提供读写服务的，然后Leader副本接收到数据之后，Follower副本会不停的给他发送请求尝试去拉取最新的数据，拉取到自己本地后，写入磁盘中。</p>
<h4 id="isr是指什么">ISR是指什么？</h4>
<p>ISR全称是“In-Sync Replicas”，也就是保持同步的副本，他的含义就是，跟Leader始终保持同步的Follower有哪些。<br>
每个Partition都有一个ISR，这个ISR里一定会有Leader自己，因为Leader肯定数据是最新的，然后就是那些跟Leader保持同步的Follower，也会在ISR里。</p>
<h4 id="acks参数">acks参数</h4>
<ul>
<li>acks = 0， KafkaProducer在客户端，只要把消息发送出去，不管那条数据有没有在哪怕Partition Leader上落到磁盘，我就不管他了，直接就认为这个消息发送成功了。如果你采用这种设置的话，那么你必须注意的一点是，可能你发送出去的消息还在半路。结果呢，Partition Leader所在Broker就直接挂了，然后结果你的客户端还认为消息发送成功了，此时就会导致这条消息就丢失了。</li>
<li>acks =1， Partition Leader接收到消息而且写入本地磁盘了，就认为成功了，不管他其他的Follower有没有同步过去这条消息了。但是这里有一个问题，万一Partition Leader刚刚接收到消息，Follower还没来得及同步过去，结果Leader所在的broker宕机了，此时也会导致这条消息丢失，因为人家客户端已经认为发送成功了。</li>
<li>acks = -1 (all), Partition Leader接收到消息之后，还必须要求ISR列表里跟Leader保持同步的那些Follower都要把消息同步过去，才能认为这条消息是写入成功了。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[源码阅读-tomcat]]></title>
        <id>https://caijh.github.io//post/yuan-ma-yue-du-tomcat</id>
        <link href="https://caijh.github.io//post/yuan-ma-yue-du-tomcat">
        </link>
        <updated>2019-07-06T14:18:45.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="tomcat启动过程">tomcat启动过程</h1>
<p><img src="https://caijh.github.io//post-images/1562423239997.jpg" alt=""></p>
]]></summary>
        <content type="html"><![CDATA[<h1 id="tomcat启动过程">tomcat启动过程</h1>
<p><img src="https://caijh.github.io//post-images/1562423239997.jpg" alt=""></p>
<!-- more -->
<ol>
<li>
<p>获取Bootstrap的静态代码块获取catalinaBaseFile及catalinaHomeFile</p>
<pre><code class="language-java">static {
        // Will always be non-null
        String userDir = System.getProperty(&quot;user.dir&quot;);

        // Home first
        String home = System.getProperty(Globals.CATALINA_HOME_PROP);
        File homeFile = null;

        if (home != null) {
            File f = new File(home);
            try {
                homeFile = f.getCanonicalFile();
            } catch (IOException ioe) {
                homeFile = f.getAbsoluteFile();
            }
        }

        if (homeFile == null) {
            // First fall-back. See if current directory is a bin directory
            // in a normal Tomcat install
            File bootstrapJar = new File(userDir, &quot;bootstrap.jar&quot;);

            if (bootstrapJar.exists()) {
                File f = new File(userDir, &quot;..&quot;);
                try {
                    homeFile = f.getCanonicalFile();
                } catch (IOException ioe) {
                    homeFile = f.getAbsoluteFile();
                }
            }
        }

        if (homeFile == null) {
            // Second fall-back. Use current directory
            File f = new File(userDir);
            try {
                homeFile = f.getCanonicalFile();
            } catch (IOException ioe) {
                homeFile = f.getAbsoluteFile();
            }
        }

        catalinaHomeFile = homeFile;
        System.setProperty(
                Globals.CATALINA_HOME_PROP, catalinaHomeFile.getPath());

        // Then base
        String base = System.getProperty(Globals.CATALINA_BASE_PROP);
        if (base == null) {
            catalinaBaseFile = catalinaHomeFile;
        } else {
            File baseFile = new File(base);
            try {
                baseFile = baseFile.getCanonicalFile();
            } catch (IOException ioe) {
                baseFile = baseFile.getAbsoluteFile();
            }
            catalinaBaseFile = baseFile;
        }
        System.setProperty(
                Globals.CATALINA_BASE_PROP, catalinaBaseFile.getPath());
    }

</code></pre>
</li>
<li>
<p>Bootstrap的main方法执行init, load,start</p>
<pre><code class="language-java">public static void main(String args[]) {

        synchronized (daemonLock) {
            if (daemon == null) {
                // Don't set daemon until init() has completed
                Bootstrap bootstrap = new Bootstrap();
                try {
                    bootstrap.init();
                } catch (Throwable t) {
                    handleThrowable(t);
                    t.printStackTrace();
                    return;
                }
                daemon = bootstrap;
            } else {
                // When running as a service the call to stop will be on a new
                // thread so make sure the correct class loader is used to
                // prevent a range of class not found exceptions.
                Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);
            }
        }

        try {
            String command = &quot;start&quot;;
            if (args.length &gt; 0) {
                command = args[args.length - 1];
            }

            if (command.equals(&quot;startd&quot;)) {
                args[args.length - 1] = &quot;start&quot;;
                daemon.load(args);
                daemon.start();
            } else if (command.equals(&quot;stopd&quot;)) {
                args[args.length - 1] = &quot;stop&quot;;
                daemon.stop();
            } else if (command.equals(&quot;start&quot;)) {
                daemon.setAwait(true);
                daemon.load(args);
                daemon.start();
                if (null == daemon.getServer()) {
                    System.exit(1);
                }
            } else if (command.equals(&quot;stop&quot;)) {
                daemon.stopServer(args);
            } else if (command.equals(&quot;configtest&quot;)) {
                daemon.load(args);
                if (null == daemon.getServer()) {
                    System.exit(1);
                }
                System.exit(0);
            } else {
                log.warn(&quot;Bootstrap: command \&quot;&quot; + command + &quot;\&quot; does not exist.&quot;);
            }
        } catch (Throwable t) {
            // Unwrap the Exception for clearer error reporting
            if (t instanceof InvocationTargetException &amp;&amp;
                    t.getCause() != null) {
                t = t.getCause();
            }
            handleThrowable(t);
            t.printStackTrace();
            System.exit(1);
        }

    }
</code></pre>
</li>
<li>
<p>Bootstrap init方法</p>
<pre><code class="language-java">public void init() throws Exception {

        initClassLoaders();

        Thread.currentThread().setContextClassLoader(catalinaLoader);

        SecurityClassLoad.securityClassLoad(catalinaLoader);

        // Load our startup class and call its process() method
        if (log.isDebugEnabled())
            log.debug(&quot;Loading startup class&quot;);
        Class&lt;?&gt; startupClass = catalinaLoader.loadClass(&quot;org.apache.catalina.startup.Catalina&quot;);
        Object startupInstance = startupClass.getConstructor().newInstance();

        // Set the shared extensions class loader
        if (log.isDebugEnabled())
            log.debug(&quot;Setting startup class properties&quot;);
        String methodName = &quot;setParentClassLoader&quot;;
        Class&lt;?&gt; paramTypes[] = new Class[1];
        paramTypes[0] = Class.forName(&quot;java.lang.ClassLoader&quot;);
        Object paramValues[] = new Object[1];
        paramValues[0] = sharedLoader;
        Method method =
            startupInstance.getClass().getMethod(methodName, paramTypes);
        method.invoke(startupInstance, paramValues);

        catalinaDaemon = startupInstance;

    }
</code></pre>
</li>
<li>
<p>Bootstrap load方法，会调用catalina.load()</p>
<pre><code class="language-java">    private void load(String[] arguments)
        throws Exception {

        // Call the load() method
        String methodName = &quot;load&quot;;
        Object param[];
        Class&lt;?&gt; paramTypes[];
        if (arguments==null || arguments.length==0) {
            paramTypes = null;
            param = null;
        } else {
            paramTypes = new Class[1];
            paramTypes[0] = arguments.getClass();
            param = new Object[1];
            param[0] = arguments;
        }
        Method method =
            catalinaDaemon.getClass().getMethod(methodName, paramTypes);
        if (log.isDebugEnabled())
            log.debug(&quot;Calling startup class &quot; + method);
        method.invoke(catalinaDaemon, param);

    }
</code></pre>
</li>
<li>
<p>catalina load</p>
<pre><code class="language-java">public void load() {

        if (loaded) {
            return;
        }
        loaded = true;

        long t1 = System.nanoTime();

        initDirs();

        // Before digester - it may be needed
        initNaming();

        // Set configuration source
        ConfigFileLoader.setSource(new CatalinaBaseConfigurationSource(Bootstrap.getCatalinaBaseFile(), getConfigFile()));
        File file = configFile();

        // Create and execute our Digester
        Digester digester = createStartDigester();

        try (ConfigurationSource.Resource resource = ConfigFileLoader.getSource().getServerXml()) {
            InputStream inputStream = resource.getInputStream();
            InputSource inputSource = new InputSource(resource.getURI().toURL().toString());
            inputSource.setByteStream(inputStream);
            digester.push(this);
            digester.parse(inputSource);
        } catch (Exception e) {
            log.warn(sm.getString(&quot;catalina.configFail&quot;, file.getAbsolutePath()), e);
            if (file.exists() &amp;&amp; !file.canRead()) {
                log.warn(sm.getString(&quot;catalina.incorrectPermissions&quot;));
            }
            return;
        }

        getServer().setCatalina(this);
        getServer().setCatalinaHome(Bootstrap.getCatalinaHomeFile());
        getServer().setCatalinaBase(Bootstrap.getCatalinaBaseFile());

        // Stream redirection
        initStreams();

        // Start the new server
        try {
            getServer().init();
        } catch (LifecycleException e) {
            if (Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;)) {
                throw new java.lang.Error(e);
            } else {
                log.error(sm.getString(&quot;catalina.initError&quot;), e);
            }
        }

        long t2 = System.nanoTime();
        if(log.isInfoEnabled()) {
            log.info(sm.getString(&quot;catalina.init&quot;, Long.valueOf((t2 - t1) / 1000000)));
        }
    }
</code></pre>
</li>
<li>
<p>Server的初始化init方法，会调用service init方法，在其中又完成了engine, executor, connector的init</p>
<pre><code class="language-JAVA">protected void initInternal() throws LifecycleException {

        super.initInternal();

        if (engine != null) {
            engine.init();
        }

        // Initialize any Executors
        for (Executor executor : findExecutors()) {
            if (executor instanceof JmxEnabled) {
                ((JmxEnabled) executor).setDomain(getDomain());
            }
            executor.init();
        }

        // Initialize mapper listener
        mapperListener.init();

        // Initialize our defined Connectors
        synchronized (connectorsLock) {
            for (Connector connector : connectors) {
                connector.init();
            }
        }
    }
</code></pre>
</li>
<li>
<p>Bootstrap调用start方法</p>
</li>
</ol>
<h1 id="connector的初始化过程">Connector的初始化过程</h1>
<p><img src="https://caijh.github.io//post-images/1562423283434.jpg" alt=""></p>
<ol>
<li>
<p>Connector对象的创建</p>
<pre><code class="language-java">public Connector(String protocol) {
        boolean aprConnector = AprLifecycleListener.isAprAvailable() &amp;&amp;
                AprLifecycleListener.getUseAprConnector();

        if (&quot;HTTP/1.1&quot;.equals(protocol) || protocol == null) {
            if (aprConnector) {
                protocolHandlerClassName = &quot;org.apache.coyote.http11.Http11AprProtocol&quot;;
            } else {
                protocolHandlerClassName = &quot;org.apache.coyote.http11.Http11NioProtocol&quot;;
            }
        } else if (&quot;AJP/1.3&quot;.equals(protocol)) {
            if (aprConnector) {
                protocolHandlerClassName = &quot;org.apache.coyote.ajp.AjpAprProtocol&quot;;
            } else {
                protocolHandlerClassName = &quot;org.apache.coyote.ajp.AjpNioProtocol&quot;;
            }
        } else {
            protocolHandlerClassName = protocol;
        }

        // Instantiate protocol handler
        ProtocolHandler p = null;
        try {
            Class&lt;?&gt; clazz = Class.forName(protocolHandlerClassName);
            p = (ProtocolHandler) clazz.getConstructor().newInstance();
        } catch (Exception e) {
            log.error(sm.getString(
                    &quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;), e);
        } finally {
            this.protocolHandler = p;
        }

        // Default for Connector depends on this system property
        setThrowOnFailure(Boolean.getBoolean(&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;));
    }
</code></pre>
</li>
<li>
<p>Connector初始化</p>
<pre><code class="language-java">@Override
protected void initInternal() throws LifecycleException {

    super.initInternal();

    if (protocolHandler == null) {
        throw new LifecycleException(
                sm.getString(&quot;coyoteConnector.protocolHandlerInstantiationFailed&quot;));
    }

    // Initialize adapter
    adapter = new CoyoteAdapter(this);
    protocolHandler.setAdapter(adapter);
    if (service != null) {
        protocolHandler.setUtilityExecutor(service.getServer().getUtilityExecutor());
    }

    // Make sure parseBodyMethodsSet has a default
    if (null == parseBodyMethodsSet) {
        setParseBodyMethods(getParseBodyMethods());
    }

    if (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isInstanceCreated()) {
        throw new LifecycleException(sm.getString(&quot;coyoteConnector.protocolHandlerNoAprListener&quot;,
                getProtocolHandlerClassName()));
    }
    if (protocolHandler.isAprRequired() &amp;&amp; !AprLifecycleListener.isAprAvailable()) {
        throw new LifecycleException(sm.getString(&quot;coyoteConnector.protocolHandlerNoAprLibrary&quot;,
                getProtocolHandlerClassName()));
    }
    if (AprLifecycleListener.isAprAvailable() &amp;&amp; AprLifecycleListener.getUseOpenSSL() &amp;&amp;
            protocolHandler instanceof AbstractHttp11JsseProtocol) {
        AbstractHttp11JsseProtocol&lt;?&gt; jsseProtocolHandler =
                (AbstractHttp11JsseProtocol&lt;?&gt;) protocolHandler;
        if (jsseProtocolHandler.isSSLEnabled() &amp;&amp;
                jsseProtocolHandler.getSslImplementationName() == null) {
            // OpenSSL is compatible with the JSSE configuration, so use it if APR is available
            jsseProtocolHandler.setSslImplementationName(OpenSSLImplementation.class.getName());
        }
    }

    try {
        protocolHandler.init();
    } catch (Exception e) {
        throw new LifecycleException(
                sm.getString(&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;), e);
    }
}
</code></pre>
</li>
<li>
<p>protocalHandle的init</p>
<pre><code class="language-java">@Override
    public void init() throws Exception {
        if (getLog().isInfoEnabled()) {
            getLog().info(sm.getString(&quot;abstractProtocolHandler.init&quot;, getName()));
            logPortOffset();
        }

        if (oname == null) {
            // Component not pre-registered so register it
            oname = createObjectName();
            if (oname != null) {
                Registry.getRegistry(null, null).registerComponent(this, oname, null);
            }
        }

        if (this.domain != null) {
            rgOname = new ObjectName(domain + &quot;:type=GlobalRequestProcessor,name=&quot; + getName());
            Registry.getRegistry(null, null).registerComponent(
                    getHandler().getGlobal(), rgOname, null);
        }

        String endpointName = getName();
        endpoint.setName(endpointName.substring(1, endpointName.length()-1));
        endpoint.setDomain(domain);

        endpoint.init();
    }
</code></pre>
</li>
<li>
<p>endpoint的init</p>
<pre><code class="language-java">public final void init() throws Exception {
    if (bindOnInit) {
        bindWithCleanup();
        bindState = BindState.BOUND_ON_INIT;
    }
    if (this.domain != null) {
        // Register endpoint (as ThreadPool - historical name)
        oname = new ObjectName(domain + &quot;:type=ThreadPool,name=\&quot;&quot; + getName() + &quot;\&quot;&quot;);
        Registry.getRegistry(null, null).registerComponent(this, oname, null);

        ObjectName socketPropertiesOname = new ObjectName(domain +
                &quot;:type=ThreadPool,name=\&quot;&quot; + getName() + &quot;\&quot;,subType=SocketProperties&quot;);
        socketProperties.setObjectName(socketPropertiesOname);
        Registry.getRegistry(null, null).registerComponent(socketProperties, socketPropertiesOname, null);

        for (SSLHostConfig sslHostConfig : findSslHostConfigs()) {
            registerJmx(sslHostConfig);
        }
    }
}
</code></pre>
</li>
<li>
<p>Connector的start方法调用protocalHandle的start方法，protocalHandle再调用endpoint的start方法，AbstractEndpoint中start方法如下</p>
<pre><code class="language-java">public final void start() throws Exception {
    if (bindState == BindState.UNBOUND) {
        bindWithCleanup();
        bindState = BindState.BOUND_ON_START;
    }
    startInternal();
}
</code></pre>
</li>
<li>
<p>Endpoint的start</p>
<pre><code class="language-java">public void startInternal() throws Exception {

    if (!running) {
        running = true;
        paused = false;

        processorCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,
                socketProperties.getProcessorCache());
        eventCache = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,
                        socketProperties.getEventCache());
        nioChannels = new SynchronizedStack&lt;&gt;(SynchronizedStack.DEFAULT_SIZE,
                socketProperties.getBufferPool());

        // Create worker collection
        if ( getExecutor() == null ) {
            createExecutor();
        }

        initializeConnectionLatch();

        // Start poller threads
        pollers = new Poller[getPollerThreadCount()];
        for (int i=0; i&lt;pollers.length; i++) {
            pollers[i] = new Poller();
            Thread pollerThread = new Thread(pollers[i], getName() + &quot;-ClientPoller-&quot;+i);
            pollerThread.setPriority(threadPriority);
            pollerThread.setDaemon(true);
            pollerThread.start();
        }

        startAcceptorThreads();
    }
}
</code></pre>
</li>
</ol>
<h1 id="tomcat处理用户请求过程">tomcat处理用户请求过程</h1>
<p>Connector的内部结构</p>
<p><img src="/Users/caijunhui/Library/Application%20Support/typora-user-images/image-20190405183952839.png" alt="image-20190405183952839"></p>
<p>Acceptor负责接收用户的请求，设置Socket属性，向poller注册socket；Poller的职责是不断轮询selector, 检查准备就绪的socket(有数据可读或可写)，实现io的多路复用。Worker线程即SocketProcessor是用来处理Socket请求的。</p>
<ol>
<li>
<p>Acceptor的run方法</p>
<pre><code class="language-java">@Override
public void run() {

    int errorDelay = 0;

    // Loop until we receive a shutdown command
    while (endpoint.isRunning()) {

        // Loop if endpoint is paused
        while (endpoint.isPaused() &amp;&amp; endpoint.isRunning()) {
            state = AcceptorState.PAUSED;
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                // Ignore
            }
        }

        if (!endpoint.isRunning()) {
            break;
        }
        state = AcceptorState.RUNNING;

        try {
            //if we have reached max connections, wait
            endpoint.countUpOrAwaitConnection();

            // Endpoint might have been paused while waiting for latch
            // If that is the case, don't accept new connections
            if (endpoint.isPaused()) {
                continue;
            }

            U socket = null;
            try {
                // Accept the next incoming connection from the server
                // socket
                socket = endpoint.serverSocketAccept();
            } catch (Exception ioe) {
                // We didn't get a socket
                endpoint.countDownConnection();
                if (endpoint.isRunning()) {
                    // Introduce delay if necessary
                    errorDelay = handleExceptionWithDelay(errorDelay);
                    // re-throw
                    throw ioe;
                } else {
                    break;
                }
            }
            // Successful accept, reset the error delay
            errorDelay = 0;

            // Configure the socket
            if (endpoint.isRunning() &amp;&amp; !endpoint.isPaused()) {
                // setSocketOptions() will hand the socket off to
                // an appropriate processor if successful
                if (!endpoint.setSocketOptions(socket)) {
                    endpoint.closeSocket(socket);
                }
            } else {
                endpoint.destroySocket(socket);
            }
        } catch (Throwable t) {
            ExceptionUtils.handleThrowable(t);
            String msg = sm.getString(&quot;endpoint.accept.fail&quot;);
            // APR specific.
            // Could push this down but not sure it is worth the trouble.
            if (t instanceof Error) {
                Error e = (Error) t;
                if (e.getError() == 233) {
                    // Not an error on HP-UX so log as a warning
                    // so it can be filtered out on that platform
                    // See bug 50273
                    log.warn(msg, t);
                } else {
                    log.error(msg, t);
                }
            } else {
                    log.error(msg, t);
            }
        }
    }
    state = AcceptorState.ENDED;
}
</code></pre>
</li>
<li>
<p>将socket注册到poller</p>
<pre><code class="language-java">/**
 * Process the specified connection.
 * @param socket The socket channel
 * @return &lt;code&gt;true&lt;/code&gt; if the socket was correctly configured
 *  and processing may continue, &lt;code&gt;false&lt;/code&gt; if the socket needs to be
 *  close immediately
 */
@Override
protected boolean setSocketOptions(SocketChannel socket) {
    // Process the connection
    try {
        // Disable blocking, polling will be used
        socket.configureBlocking(false);
        Socket sock = socket.socket();
        socketProperties.setProperties(sock);

        NioChannel channel = nioChannels.pop();
        if (channel == null) {
            SocketBufferHandler bufhandler = new SocketBufferHandler(
                    socketProperties.getAppReadBufSize(),
                    socketProperties.getAppWriteBufSize(),
                    socketProperties.getDirectBuffer());
            if (isSSLEnabled()) {
                channel = new SecureNioChannel(socket, bufhandler, selectorPool, this);
            } else {
                channel = new NioChannel(socket, bufhandler);
            }
        } else {
            channel.setIOChannel(socket);
            channel.reset();
        }
        getPoller0().register(channel);
    } catch (Throwable t) {
        ExceptionUtils.handleThrowable(t);
        try {
            log.error(sm.getString(&quot;endpoint.socketOptionsError&quot;), t);
        } catch (Throwable tt) {
            ExceptionUtils.handleThrowable(tt);
        }
        // Tell to close the socket
        return false;
    }
    return true;
}
</code></pre>
<pre><code class="language-java">/**
 * Registers a newly created socket with the poller.
 *
 * @param socket    The newly created socket
 */
public void register(final NioChannel socket) {
    socket.setPoller(this);
    NioSocketWrapper socketWrapper = new NioSocketWrapper(socket, NioEndpoint.this);
    socket.setSocketWrapper(socketWrapper);
    socketWrapper.setPoller(this);
    socketWrapper.setReadTimeout(getConnectionTimeout());
    socketWrapper.setWriteTimeout(getConnectionTimeout());
    socketWrapper.setKeepAliveLeft(NioEndpoint.this.getMaxKeepAliveRequests());
    socketWrapper.setSecure(isSSLEnabled());
    PollerEvent r = eventCache.pop();
    socketWrapper.interestOps(SelectionKey.OP_READ);//this is what OP_REGISTER turns into.
    if (r == null) {
        r = new PollerEvent(socket, socketWrapper, OP_REGISTER);
    } else {
        r.reset(socket, socketWrapper, OP_REGISTER);
    }
    addEvent(r);
}
</code></pre>
</li>
<li>
<p>Poller的run 方法</p>
<pre><code class="language-java">/**
 * The background thread that adds sockets to the Poller, checks the
 * poller for triggered events and hands the associated socket off to an
 * appropriate processor as events occur.
 */
@Override
public void run() {
    // Loop until destroy() is called
    while (true) {

        boolean hasEvents = false;

        try {
            if (!close) {
                hasEvents = events();
                if (wakeupCounter.getAndSet(-1) &gt; 0) {
                    // If we are here, means we have other stuff to do
                    // Do a non blocking select
                    keyCount = selector.selectNow();
                } else {
                    keyCount = selector.select(selectorTimeout);
                }
                wakeupCounter.set(0);
            }
            if (close) {
                events();
                timeout(0, false);
                try {
                    selector.close();
                } catch (IOException ioe) {
                    log.error(sm.getString(&quot;endpoint.nio.selectorCloseFail&quot;), ioe);
                }
                break;
            }
        } catch (Throwable x) {
            ExceptionUtils.handleThrowable(x);
            log.error(sm.getString(&quot;endpoint.nio.selectorLoopError&quot;), x);
            continue;
        }
        // Either we timed out or we woke up, process events first
        if ( keyCount == 0 ) hasEvents = (hasEvents | events());

        Iterator&lt;SelectionKey&gt; iterator =
            keyCount &gt; 0 ? selector.selectedKeys().iterator() : null;
        // Walk through the collection of ready keys and dispatch
        // any active event.
        while (iterator != null &amp;&amp; iterator.hasNext()) {
            SelectionKey sk = iterator.next();
            NioSocketWrapper attachment = (NioSocketWrapper)sk.attachment();
            // Attachment may be null if another thread has called
            // cancelledKey()
            if (attachment == null) {
                iterator.remove();
            } else {
                iterator.remove();
                processKey(sk, attachment);
            }
        }

        // Process timeouts
        timeout(keyCount,hasEvents);
    }

    getStopLatch().countDown();
}
</code></pre>
<pre><code class="language-java">protected void processKey(SelectionKey sk, NioSocketWrapper socketWrapper) {
    try {
        if (close) {
            cancelledKey(sk);
        } else if (sk.isValid() &amp;&amp; socketWrapper != null) {
            if (sk.isReadable() || sk.isWritable()) {
                if ( socketWrapper.getSendfileData() != null ) {
                    processSendfile(sk, socketWrapper, false);
                } else {
                    unreg(sk, socketWrapper, sk.readyOps());
                    boolean closeSocket = false;
                    // Read goes before write
                    if (sk.isReadable()) {
                        if (socketWrapper.readOperation != null) {
                            getExecutor().execute(socketWrapper.readOperation);
                        } else if (!processSocket(socketWrapper, SocketEvent.OPEN_READ, true)) {
                            closeSocket = true;
                        }
                    }
                    if (!closeSocket &amp;&amp; sk.isWritable()) {
                        if (socketWrapper.writeOperation != null) {
                            getExecutor().execute(socketWrapper.writeOperation);
                        } else if (!processSocket(socketWrapper, SocketEvent.OPEN_WRITE, true)) {
                            closeSocket = true;
                        }
                    }
                    if (closeSocket) {
                        cancelledKey(sk);
                    }
                }
            }
        } else {
            // Invalid key
            cancelledKey(sk);
        }
    } catch (CancelledKeyException ckx) {
        cancelledKey(sk);
    } catch (Throwable t) {
        ExceptionUtils.handleThrowable(t);
        log.error(sm.getString(&quot;endpoint.nio.keyProcessingError&quot;), t);
    }
}
</code></pre>
</li>
<li>
<p>Worker进程实际处理用户请求</p>
<pre><code class="language-java">/**
 * Process the given SocketWrapper with the given status. Used to trigger
 * processing as if the Poller (for those endpoints that have one)
 * selected the socket.
 *
 * @param socketWrapper The socket wrapper to process
 * @param event         The socket event to be processed
 * @param dispatch      Should the processing be performed on a new
 *                          container thread
 *
 * @return if processing was triggered successfully
 */
public boolean processSocket(SocketWrapperBase&lt;S&gt; socketWrapper,
        SocketEvent event, boolean dispatch) {
    try {
        if (socketWrapper == null) {
            return false;
        }
        SocketProcessorBase&lt;S&gt; sc = processorCache.pop();
        if (sc == null) {
            sc = createSocketProcessor(socketWrapper, event);
        } else {
            sc.reset(socketWrapper, event);
        }
        Executor executor = getExecutor();
        if (dispatch &amp;&amp; executor != null) {
            executor.execute(sc);
        } else {
            sc.run();
        }
    } catch (RejectedExecutionException ree) {
        getLog().warn(sm.getString(&quot;endpoint.executor.fail&quot;, socketWrapper) , ree);
        return false;
    } catch (Throwable t) {
        ExceptionUtils.handleThrowable(t);
        // This means we got an OOM or similar creating a thread, or that
        // the pool and its queue are full
        getLog().error(sm.getString(&quot;endpoint.process.fail&quot;), t);
        return false;
    }
    return true;
}
</code></pre>
<pre><code class="language-java">@Override
protected SocketProcessorBase&lt;NioChannel&gt; createSocketProcessor(
        SocketWrapperBase&lt;NioChannel&gt; socketWrapper, SocketEvent event) {
    return new SocketProcessor(socketWrapper, event);
}
</code></pre>
<pre><code class="language-java">protected class SocketProcessor extends SocketProcessorBase&lt;NioChannel&gt; {

    public SocketProcessor(SocketWrapperBase&lt;NioChannel&gt; socketWrapper, SocketEvent event) {
        super(socketWrapper, event);
    }

    @Override
    protected void doRun() {
        NioChannel socket = socketWrapper.getSocket();
        SelectionKey key = socket.getIOChannel().keyFor(socket.getPoller().getSelector());

        try {
            int handshake = -1;

            try {
                if (key != null) {
                    if (socket.isHandshakeComplete()) {
                        // No TLS handshaking required. Let the handler
                        // process this socket / event combination.
                        handshake = 0;
                    } else if (event == SocketEvent.STOP || event == SocketEvent.DISCONNECT ||
                            event == SocketEvent.ERROR) {
                        // Unable to complete the TLS handshake. Treat it as
                        // if the handshake failed.
                        handshake = -1;
                    } else {
                        handshake = socket.handshake(key.isReadable(), key.isWritable());
                        // The handshake process reads/writes from/to the
                        // socket. status may therefore be OPEN_WRITE once
                        // the handshake completes. However, the handshake
                        // happens when the socket is opened so the status
                        // must always be OPEN_READ after it completes. It
                        // is OK to always set this as it is only used if
                        // the handshake completes.
                        event = SocketEvent.OPEN_READ;
                    }
                }
            } catch (IOException x) {
                handshake = -1;
                if (log.isDebugEnabled()) log.debug(&quot;Error during SSL handshake&quot;,x);
            } catch (CancelledKeyException ckx) {
                handshake = -1;
            }
            if (handshake == 0) {
                SocketState state = SocketState.OPEN;
                // Process the request from this socket
                if (event == null) {
                    state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);
                } else {
                    state = getHandler().process(socketWrapper, event);
                }
                if (state == SocketState.CLOSED) {
                    close(socket, key);
                }
            } else if (handshake == -1 ) {
                close(socket, key);
            } else if (handshake == SelectionKey.OP_READ){
                socketWrapper.registerReadInterest();
            } else if (handshake == SelectionKey.OP_WRITE){
                socketWrapper.registerWriteInterest();
            }
        } catch (CancelledKeyException cx) {
            socket.getPoller().cancelledKey(key);
        } catch (VirtualMachineError vme) {
            ExceptionUtils.handleThrowable(vme);
        } catch (Throwable t) {
            log.error(sm.getString(&quot;endpoint.processing.fail&quot;), t);
            socket.getPoller().cancelledKey(key);
        } finally {
            socketWrapper = null;
            event = null;
            //return to cache
            if (running &amp;&amp; !paused) {
                processorCache.push(this);
            }
        }
    }
}
</code></pre>
</li>
</ol>
]]></content>
    </entry>
</feed>